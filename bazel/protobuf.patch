--- BUILD
+++ BUILD
@@ -525,7 +525,7 @@ cc_binary(
 filegroup(
     name = "testdata",
     srcs = glob(["src/google/protobuf/testdata/**/*"]),
-    visibility = ["//:__subpackages__"],
+    visibility = ["//visibility:public"],
 )
 
 RELATIVE_LITE_TEST_PROTOS = [
@@ -931,13 +931,10 @@ py_library(
         [
             "python/google/protobuf/**/*.py",
         ],
-        exclude = [
-            "python/google/protobuf/internal/*_test.py",
-            "python/google/protobuf/internal/test_util.py",
-        ],
     ),
     imports = ["python"],
     srcs_version = "PY2AND3",
+    visibility = ["//visibility:public"],
 )
 
 cc_binary(
@@ -1038,13 +1035,6 @@ py_proto_library(
     name = "protobuf_python",
     srcs = COPIED_WELL_KNOWN_PROTOS,
     include = "python",
-    data = select({
-        "//conditions:default": [],
-        ":use_fast_cpp_protos": [
-            ":python/google/protobuf/internal/_api_implementation.so",
-            ":python/google/protobuf/pyext/_message.so",
-        ],
-    }),
     default_runtime = "",
     protoc = ":protoc",
     py_libs = [
@@ -1080,6 +1070,7 @@ py_proto_library(
     protoc = ":protoc",
     srcs_version = "PY2AND3",
     deps = [":protobuf_python"],
+    visibility = ["//visibility:public"],
 )
 
 py_proto_library(
@@ -1093,6 +1084,7 @@ py_proto_library(
     protoc = ":protoc",
     srcs_version = "PY2AND3",
     deps = [":python_common_test_protos"],
+    visibility = ["//visibility:public"],
 )
 
 py_library(

--- python/google/protobuf/internal/test_util.py
+++ python/google/protobuf/internal/test_util.py
@@ -634,6 +634,13 @@ def GoldenFile(filename):
     # Found it.  Load the golden file from the testdata directory.
     return open(full_path, 'rb')
 
+  # Search for cross-repo path.
+  full_path = os.path.join('external/com_google_protobuf/src/google/protobuf/testdata',
+                           filename)
+  if os.path.exists(full_path):
+    # Found it.  Load the golden file from the testdata directory.
+    return open(full_path, 'rb')
+
   raise RuntimeError(
       'Could not find golden files.  This test must be run from within the '
       'protobuf source package so that it can read test data files from the '

--- python/google/protobuf/internal/testing_refleaks.py
+++ python/google/protobuf/internal/testing_refleaks.py
@@ -67,6 +67,12 @@ class ReferenceLeakCheckerMixin(object):
   NB_RUNS = 3
 
   def run(self, result=None):
+    testMethod = getattr(self, self._testMethodName)
+    expecting_failure_method = getattr(testMethod, "__unittest_expecting_failure__", False)
+    expecting_failure_class = getattr(self, "__unittest_expecting_failure__", False)
+    if expecting_failure_class or expecting_failure_method:
+      return
+
     # python_message.py registers all Message classes to some pickle global
     # registry, which makes the classes immortal.
     # We save a copy of this registry, and reset it before we could references.

--- toolchain/BUILD
+++ toolchain/BUILD
@@ -14,6 +14,7 @@ TOOLCHAINS = {
     "linux-x86_64": "cc-compiler-linux-x86_64",
     "win32": "cc-compiler-windows-x86_32",
     "win64": "cc-compiler-windows-x86_64",
+    "k8": "cc-compiler-k8",
 }

 cc_toolchain_suite(
@@ -39,6 +40,14 @@ cc_toolchain_suite(
     for cpu, toolchain in TOOLCHAINS.items()
 ]
 
+cc_toolchain_config(
+    name = "k8-config",
+    linker_path = "/usr/bin/ld",
+    sysroot = "/opt/manylinux/2014/x86_64",
+    target_cpu = "x86_64",
+    target_full_name = "x86_64-linux-gnu",
+)
+
 cc_toolchain_config(
     name = "linux-aarch_64-config",
     sysroot = "/opt/manylinux/2014/aarch64",

--- toolchain/cc_toolchain_config.bzl
+++ toolchain/cc_toolchain_config.bzl
@@ -157,6 +157,21 @@ def _impl(ctx):
       ],
   )
 
+  features = [linker_flags, compiler_flags, sysroot_flags]
+
+  if "mingw" in ctx.attr.target_full_name:
+      features.append(
+          feature(
+              name = "targets_windows",
+              enabled = True,
+              #implies = ["copy_dynamic_libraries_to_binary"],
+          )
+      )
+  else:
+      features.append(
+          feature(name = "supports_pic", enabled = True)
+      )
+
   return cc_common.create_cc_toolchain_config_info(
       abi_libc_version = ctx.attr.abi_version,
       abi_version = ctx.attr.abi_version,
@@ -169,7 +184,7 @@ def _impl(ctx):
           "/usr/local/include",
           "/usr/local/lib/clang",
       ],
-      features = [linker_flags, compiler_flags, sysroot_flags],
+      features = features,
       host_system_name = "local",
       target_cpu = ctx.attr.target_cpu,
       target_libc = ctx.attr.target_cpu,

